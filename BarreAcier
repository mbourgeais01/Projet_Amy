package Gabriel.INFO.S2;

import java.io.IOException;
import java.io.Writer;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.paint.Color;
import static javafx.scene.paint.Color.GRAY;

/**
 *
 * @author Utilisateur
 */
public class BarreAcier extends Treillis {

 
    private Point debut;
    private Point fin;
    private double longMin;
    private double longMax;
    
    public BarreAcier(Point debut, Point fin, Color couleur) {
        //super(couleur);
        this.debut = debut;
        this.fin = fin;
        this.longMax =350;
        this.longMin =80;
    }

    public BarreAcier(Point debut, Point fin) {
        this(debut, fin, Color.GRAY);
    }

    public Point getDebut() {
        return debut;
    }

    public Point getFin() {
        return fin;
    }
    
    @Override
    public String toString() {
        return "[" + this.debut + "," + this.fin + "] en acier";
    }
    
    @Override
    public double maxX() {
        return Math.max(this.debut.maxX(), this.fin.maxX());
    }

    @Override
    public double minX() {
        return Math.min(this.debut.minX(), this.fin.minX());
    }

    @Override
    public double maxY() {
        return Math.max(this.debut.maxY(), this.fin.maxY());
    }

    @Override
    public double minY() {
        return Math.min(this.debut.minY(), this.fin.minY());
    }

    @Override
    public void dessine(GraphicsContext context) {
        
        if(getLong() > this.longMin && getLong() < this.longMax){
        context.setStroke(GRAY);
        context.strokeLine(this.debut.getPx(), this.debut.getPy(), this.fin.getPx(), this.fin.getPy());
        }
    }

 

    @Override
    public void save(Writer w, Numeroteur<Treillis> num) throws IOException {
        if (!num.objExist(this)) {
            int id = num.creeID(this);
            this.debut.save(w, num);
            this.fin.save(w, num);
            w.append("BarreEnAcier;" + id + ";"+
                    num.getID(this.debut) + ";" + num.getID(this.fin) +"\n");
        }
    }

    @Override
    public double distancePoint(Point p) {
        double x1 = this.debut.getPx();
        double y1 = this.debut.getPy();
        double x2 = this.fin.getPx();
        double y2 = this.fin.getPy();
        double x3 = p.getPx();
        double y3 = p.getPy();
        double up = ((x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1))
                / (Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
        if (up < 0) {
            return this.debut.distancePoint(p);
        } else if (up > 1) {
            return this.fin.distancePoint(p);
        } else {
            Point p4 = new Point(x1 + up * (x2 - x1),
                    y1 + up * (y2 - y1));
            return p4.distancePoint(p);
        }}
    
    public double getLong(){
            
        return Math.sqrt((this.debut.getPx()-this.fin.getPx())*(this.debut.getPx()-this.fin.getPx())
                        +(this.debut.getPy()-this.fin.getPy())*(this.debut.getPy()-this.fin.getPy()));    
          
    }

    
    
    
        
    
}
