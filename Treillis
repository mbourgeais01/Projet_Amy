package Gabriel.INFO.S2;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.paint.Color;

/**
 *
 * @author francois
 */
public abstract class Treillis {

    public static Color COULEUR_SELECTION = Color.RED;

    /**
     * null si aucun groupe
     */
    private Groupe groupe;

    public Groupe getGroupe() {
        return groupe;
    }

    void setGroupe(Groupe groupe) {
        this.groupe = groupe;
    }

    public abstract double maxX();

    public abstract double minX();

    public abstract double maxY();

    public abstract double minY();

    public abstract double distancePoint(Point p);

    public abstract void dessine(GraphicsContext context);
    
    public abstract void save(Writer w, Numeroteur<Treillis> num) throws IOException;

    public void sauvegarde(File fout) throws IOException {
        Numeroteur<Treillis> num = new Numeroteur<Treillis>();
        try (BufferedWriter bout = new BufferedWriter(new FileWriter(fout))) {
            this.save(bout, num);
        }
    }

    public static Treillis lecture(File fin) throws IOException {
        Numeroteur<Treillis> num = new Numeroteur<Treillis>();
        Treillis derniere = null;
        try (BufferedReader bin = new BufferedReader(new FileReader(fin))) {
            String line;
            while ((line = bin.readLine()) != null && line.length() != 0) {
                String[] bouts = line.split(";");
                if (bouts[0].equals("Noeud")) {
                    int id = Integer.parseInt(bouts[1]);
                    double px = Double.parseDouble(bouts[2]);
                    double py = Double.parseDouble(bouts[3]);
                    Point np = new Point(px, py);
                    num.associe(id, np);
                    derniere = np;
                } else if (bouts[0].equals("Groupe")) {
                    int id = Integer.parseInt(bouts[1]);
                    Groupe ng = new Groupe();
                    num.associe(id, ng);
                    for (int i = 2; i < bouts.length; i++) {
                        int idSous = Integer.parseInt(bouts[i]);
                        Treillis fig = num.getObj(idSous);
                        ng.add(fig);
                    }
                    derniere = ng;
                } /*else if (bouts[0].equals("Noeuds")) {
                    int id = Integer.parseInt(bouts[1]);
                    double Nx = Double.parseDouble(bouts[2]);
                    double Ny = Double.parseDouble(bouts[3]);
                    Noeuds nn = new Noeuds(Nx, Ny);
                    num.associe(id, nn);
                    derniere = nn;
            }*/ else if (bouts[0].equals("TriangleTerrain")) {
                    int id = Integer.parseInt(bouts[1]);
                    int idP1 = Integer.parseInt(bouts[2]);
                    int idP2 = Integer.parseInt(bouts[3]);
                    int idP3 = Integer.parseInt(bouts[4]);
                    Point p1 = (Point) num.getObj(idP1);
                    Point p2 = (Point) num.getObj(idP2);
                    Point p3 = (Point) num.getObj(idP3);
                    TriangleTerrain ntt = new TriangleTerrain(p1, p2, p3);
                    num.associe(id, ntt);
                    derniere = ntt;
                }else if (bouts[0].equals("BarreEnBois")) {
                    int id = Integer.parseInt(bouts[1]);
                    int idP1 = Integer.parseInt(bouts[2]);
                    int idP2 = Integer.parseInt(bouts[3]);
                    Point p1 = (Point) num.getObj(idP1);
                    Point p2 = (Point) num.getObj(idP2);
                    BarreBois nBeb = new BarreBois(p1, p2);
                    num.associe(id, nBeb);
                    derniere = nBeb;
                }else if (bouts[0].equals("BarreEnAcier")) {
                    int id = Integer.parseInt(bouts[1]);
                    int idP1 = Integer.parseInt(bouts[2]);
                    int idP2 = Integer.parseInt(bouts[3]);
                    Point p1 = (Point) num.getObj(idP1);
                    Point p2 = (Point) num.getObj(idP2);
                    BarreAcier nBea = new BarreAcier(p1, p2);
                    num.associe(id, nBea);
                    derniere = nBea;
                }else if (bouts[0].equals("AppuisDouble")) {
                    int id = Integer.parseInt(bouts[1]);
                    double Nx = Double.parseDouble(bouts[2]);
                    double Ny = Double.parseDouble(bouts[3]);
                    AppuisDouble AD = new AppuisDouble(Nx, Ny);
                    num.associe(id, AD);
                    derniere = AD;
                } else if (bouts[0].equals("AppuisSimple")) {
                    int id = Integer.parseInt(bouts[1]);
                    double Nx = Double.parseDouble(bouts[2]);
                    double Ny = Double.parseDouble(bouts[3]);
                    AppuisSimple AS = new AppuisSimple(Nx, Ny);
                    num.associe(id, AS);
                    derniere = AS;
                }else if (bouts[0].equals("ZoneConstructible")) {
                    int id = Integer.parseInt(bouts[1]);
                    int idP1 = Integer.parseInt(bouts[2]);
                    int idP2 = Integer.parseInt(bouts[3]);
                    Point p1 = (Point) num.getObj(idP1);
                    Point p2 = (Point) num.getObj(idP2);
                    ZoneDessin nZD = new ZoneDessin(p1, p2);
                    num.associe(id, nZD);
                    derniere = nZD;
                } 
            }

        }
        return derniere;
    }
}
